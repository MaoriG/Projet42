# Nom de l'exÃ©cutable
NAME = philosophers

# RÃ©pertoires
LIBFT = ./libft/libft.a
FT_PRINTF = ./printf/libftprintf.a
SRC_DIR = ./srcs/

# Fichiers source
SRC = $(SRC_DIR)main.c \
$(SRC_DIR)utils.c \
$(SRC_DIR)parsing.c \
$(SRC_DIR)dinner.c \
$(SRC_DIR)getters_setters.c \
$(SRC_DIR)init.c \
$(SRC_DIR)safe_function.c \
$(SRC_DIR)synchro.c \
$(SRC_DIR)write.c \
# Fichiers objets correspondants
OBJ = $(SRC:.c=.o)

# Compilateur et flags
CC = cc
MLX_FLAGS = -L./minilibx -lmlx -lXext -lX11
RM = rm -f

# Cible par dÃ©faut
all: $(NAME)

# CrÃ©er l'exÃ©cutable
$(NAME): $(OBJ) $(LIBFT) $(FT_PRINTF)
	@echo "ðŸ”¨ Linking $(NAME)..."
	$(CC) $(OBJ) $(LIBFT) $(FT_PRINTF) -o $(NAME)

# RÃ¨gle pour compiler les fichiers objets
%.o: %.c
	@echo "ðŸ’» Compiling $<"
	$(CC) -c $< -o $@

# Nettoyer les fichiers objets
clean:
	@echo "ðŸ§¹ Cleaning object files..."
	$(RM) $(OBJ)

# Supprimer les objets et l'exÃ©cutable
fclean: clean
	@echo "ðŸ§¼ Cleaning everything..."
	$(RM) $(NAME)

# Recompiler tout
re: fclean all

# RÃ¨gle pour gÃ©nÃ©rer la bibliothÃ¨que libft
$(LIBFT):
	make -C ./libft

# RÃ¨gle pour gÃ©nÃ©rer la bibliothÃ¨que libftprintf
$(FT_PRINTF):
	make -C ./printf

